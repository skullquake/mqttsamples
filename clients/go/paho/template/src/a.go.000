package main
import(
	"fmt"
	"log"
	"os"
	mqtt"github.com/eclipse/paho.mqtt.golang"
	"time"
)
var messagePubHandler mqtt.MessageHandler=func(client mqtt.Client,msg mqtt.Message){
	log.Printf("Received message: %s from topic: %s\n",msg.Payload(),msg.Topic())
}
var connectHandler mqtt.OnConnectHandler=func(client mqtt.Client){
	log.Println("Connected")
}
var connectLostHandler mqtt.ConnectionLostHandler=func(client mqtt.Client,err error){
	log.Printf("Connect lost: %v",err)
}
func main(){
	var broker="localhost"
	var port=1883
	mqtt.ERROR = log.New(os.Stdout, "[ERROR] ", 0)
	mqtt.CRITICAL = log.New(os.Stdout, "[CRIT] ", 0)
	mqtt.WARN = log.New(os.Stdout, "[WARN]  ", 0)
	mqtt.DEBUG = log.New(os.Stdout, "[DEBUG] ", 0)
	opts:=mqtt.NewClientOptions()
	opts.AddBroker(fmt.Sprintf("tcp://%s:%d",broker,port))
	opts.SetClientID("go_paho")
	//opts.SetUsername("usr")
	//opts.SetPassword("pas")
	opts.SetKeepAlive(2*time.Second)
	opts.SetPingTimeout(1*time.Second)
	opts.SetDefaultPublishHandler(messagePubHandler)
	opts.OnConnect=connectHandler
	opts.OnConnectionLost=connectLostHandler
	client:=mqtt.NewClient(opts)
	if token:=client.Connect();token.Wait()&&token.Error()!=nil{
		panic(token.Error())
	}
	log.Println("DONE");
}
